main_fun()
{   
  centroids = kMeansInitCentroids(X, K); 
  for iter = 1:iterations 
   
   % Cluster assignment step: Assign each data point to the % closest centroid. idx(i) corresponds to cË†(i), the index 
    % of the centroid assigned to example i 
  
  idx = findClosestCentroids(X, centroids);
    
    % Move centroid step: Compute means based on centroid 
    % assignments 
 
  centroids = computeMeans(X, idx, K);
  end
  
}



function centroids = kMeansInitCentroids(X, K) %  give a k*n matrix
{
    %KMEANSINITCENTROIDS This function initializes K centroids that are to be 
    %used in K-Means on the dataset X
    %   centroids = KMEANSINITCENTROIDS(X, K) returns K initial centroids to be
    %   used with the K-Means on the dataset X
    %

    % You should return this values correctly
    centroids = zeros(K, size(X, 2));


    randidx = randperm(size(X, 1));
    % Take the first K examples as centroids
    centroids = X(randidx(1:K), :);
}


function idx = findClosestCentroids(X, centroids) % give a m*1 matrix
{
%FINDCLOSESTCENTROIDS computes the centroid memberships for every example
%   idx = FINDCLOSESTCENTROIDS (X, centroids) returns the closest centroids
%   in idx for a dataset X where each row is a single example. idx = m x 1 
%   vector of centroid assignments (i.e. each entry in range [1..K])
%

% Set K
K = size(centroids, 1);
m = size(X,1);
% You need to return the following variables correctly.
idx = zeros(size(X,1), 1);

%this is one way to implement
for i = 1:m
    temp = zeros(K, 1);    %create a k*1 matrix
    for j = 1:K   %need to compute every centroids with the same example, we will get m example and each will have K distances 
        
        temp(j) = (norm(X(i,:) - centroids(j, :)))^2;  % we use the euclidean metric to compute the distance
       
    end
    [~, idx(i)] = min(temp,[], 1); % we need to find the neariest one from the 3 distances
end

%this is another way to implement
for i=1:size(X,1)
    tmp=zeros(K,1);
    for j=1:K
        tmp(j)=sum((X(i,:)-centroids(j,:)).^2);
    end
    [~,  idx(i)]=min(tmp,[],1);

end



end
}


function centroids = computeCentroids(X, idx, K)
{
%COMPUTECENTROIDS returns the new centroids by computing the means of the 
%data points assigned to each centroid.
%   centroids = COMPUTECENTROIDS(X, idx, K) returns the new centroids by 
%   computing the means of the data points assigned to each centroid. It is
%   given a dataset X where each row is a single data point, a vector
%   idx of centroid assignments (i.e. each entry in range [1..K]) for each
%   example, and K, the number of centroids. You should return a matrix
%   centroids, where each row of centroids is the mean of the data points
%   assigned to it.
%

% Useful variables
[m n] = size(X);

% You need to return the following variables correctly.
centroids = zeros(K, n);


for i = 1:K     
    [row_idx] = find(idx == i);  % this time we will implement mainly on centroids
    muX = zeros(1, n);           % we will find all the examples with the same centroids 
    for j = row_idx
        muX = sum(muX(1, :) + X(j, :)); % then we will accmulate these examples
    end
centroids(i, :) = muX./(size(row_idx, 1));  % finally we will get the accumulation divided by the number of these examples with the same centroids
end


end
}
